###
Subclassing: low-level internals for creating new control classes using either
Control.sub() in JavaScript or CoffeeScript's built-in class syntax.

QuickUI control classes are subclasses of the base jQuery class. jQuery supports
the use of standard prototype-based classes such as are commonly found in
JavaScript projects. However, it turns out that jQuery's class scheme is quite
Byzantine. For conciseness, jQuery wants to support static constructors, that
is, creation of a new jQuery object without actually needing to use the "new"
keyword. So the following are equivalent:

  var $elements = $("div");
  var $elements = new $("div");

To achieve this, the base jQuery() constructor doesn't actually return a new
instance of the jQuery class. Rather, it returns a new instance of a helper
class called jQuery.prototype.init. The constructor does this regardless of
whether it's called with "new" or not, so it can produce the results above.

Any subclasses of jQuery need to support this helper class arrangement. To make
that easier, jQuery exposes an official plugin called $.sub() that returns a
subclass of jQuery. This creates a new subclass of jQuery *and* a new companion
helper class. The subclass' constructor actually returns a new instance of the
corresponding helper class.

That all works fine in JavaScript, but makes problems for CoffeeScript users.
CoffeeScript classes include a default constructor that is unaware of jQuery's
helper class shenanigans. QuickUI works around this problem in two ways:

1. The Control() constructor works exactly like one created by $.sub(), with the
   extra ability: whenever its invoked by a plain CoffeeScript subclass, it will
   automatically modify that class to conform to jQuery's helper class scheme.
   This allows you to create QuickUI subclasses with CoffeeScript's class
   syntax, and still end up with a jQuery-compatible class.
2. The Control.sub() function works just like jQuery's own $.sub() function,
   but the class' constructor is similarly modified to detect and modify plain
   CoffeeScript classes.

The result is that you can create a subclass of Control in JavaScript via
Control.sub(), or in CoffeeScript via the class syntax. Furthermore, you can
create subclasses of *those* classes in either language.
###


###
Return a class constructor that's capable of detecting whether it's been invoked
by a plain CoffeeScript class. If so, the class will be modified to be
compatible with jQuery.

The constructor needs to deal with two situations:
1. The class itself is being instantiated.
2. A CoffeeScript-based subclass of the class is being instantiated. The default
   constructor for a CoffeeScript class just invokes the base class'
   constructor. In that case, this constructor will ensure the subclass is
   compatible with jQuery and QuickUI before going further.

This is complicated by the fact the constructor may be invoked with "new", or in
a static form (without "new").

In all cases, the constructor ultimately returns an instance of an "init"
helper class, as is usual for jQuery subclasses created via $.sub().
###
controlConstructor = ->
  # Return a jQuery constructor.
  ( selector, context ) ->

    # Figure out which class is being instantiated.
    if @ instanceof jQuery
      # Simplest case, but also unfortunately rare: the constructor was invoked
      # in response to a "new Foo()" call on the control class Foo.
      classFn = @constructor
    else
      # Harder case. The constructor was invoked in the static constructor form
      # preferred by jQuery: calling a class Foo() without "new". Here, "this"
      # is the window, which doesn't give us any class information. We have to
      # walk up the call chain of callers to find which class we're actually
      # instantiating.
      #
      # NB: The expected value of "this" at this point is "window". However, due
      # to a bizarre bug in IE8, when a Control() constructor is invoked during
      # a jQuery ready() handler, "this" will *a* window but not *the* window.
      # The code below does not currently depend on the value of "this", but
      # for future reference, keep this mind.
      classFn = arguments.callee

      # See if we were invoked by the constructor of a subclass.
      while ( classFn.caller:: ) instanceof classFn and classFn.caller.__super__ isnt undefined
        # This function was invoked by the constructor of a subclass created by
        # CoffeeScript. That constructor, in all likelihood, is the default
        # constructor generated by CoffeeScript (as QuickUI controls don't do
        # real work in their constructor; they use initialize() instead). So,
        # pop up one level in the call tree, then check *that* class to see
        # whether it's a CoffeeScript sub-subclass.
        classFn = classFn.caller

    # Ensure the class has been treated to be jQuery- and QuickUI-compatible.
    if coffeeClassNeedsCompatibility classFn
      makeCoffeeClassCompatible classFn

    # Actually create an instance of the init helper class per standard jQuery.
    return new classFn::init selector, context


###
Return true if the given class has already been made jQuery + QuickUI compatible.
###
coffeeClassNeedsCompatibility = ( classFn ) ->
  # Look for __super__ member, which is created by CoffeeScript's class syntax.
  if classFn.hasOwnProperty "__super__"
    # Class was created by CoffeeScript. CoffeeScript will have copied all keys
    # from the base class to this present class. One of those keys is the
    # "superclass" member. If the class hasn't yet been made compatible, this
    # copied superclass member will still point to the super-superclass. So we
    # can compare the __super__'s constructor to the superclass value to see if
    # the class has been made compatible.
    classFn.__super__.constructor isnt classFn.superclass
  else
    # Regular JavaScript class
    false


###
Create an "init" helper class per jQuery's class scheme. The init helper class
is the one that actually does the real work in jQuery.
###
createInitClass = ( classFn ) ->

  # This is the same init helper class that $.sub() creates.
  classFn::init = ( selector, context ) ->
    if context and context instanceof jQuery and !( context instanceof classFn )
      context = classFn( context )
    return jQuery::init.call this, selector, context, root
    
  # The helper class inherits from the class exposed to the developer.
  classFn::init:: = classFn::
  
  # This is used in the closure for the init() function defined above.
  # Per jQuery.sub(), this must be declared *after* the init.prototype is
  # set above, or else the constructor below won't work.
  root = new classFn document


###
Return a jQuery-compatible subclass of the indicated superclass.
###
createSubclass = ( superclass ) ->
  
  if coffeeClassNeedsCompatibility superclass
    # Make CoffeeScript-based superclass compatible first.
    makeCoffeeClassCompatible superclass 

  subclass = controlConstructor()

  # Give the new class all the class methods of the superclass.
  jQuery.extend true, subclass, superclass

  # jQuery classes define a "superclass" member that points to the superclass;
  # CoffeeScript classes define a "__super__" member that points to the
  # superclass' prototype. Both of these will have been copied by the call to
  # $.extend() above. Now update them with the real values.
  subclass.superclass = superclass
  subclass.__super__ = superclass::

  # Create a prototype of the appropriate class, and update its constructor
  # so that instanceof will work as expected.
  subclass:: = new superclass()
  subclass::constructor = subclass

  # jQuery classes use fn as a synonym for prototype.
  subclass.fn = subclass::

  # Create the init helper class which jQuery expects.
  createInitClass subclass

  subclass


###
Make the indicated CoffeeScript class compatible with jQuery + QuickUI. This
entails fixing up the class so that it looks identical to one created via
Control.sub().

One extra bit of work is extracting a class name from the class constructor
generated by CoffeeScript. JavaScript developers using Control.sub() have to
explicitly specify a class name, but CoffeeScript developers can simply use the
language's class syntax, which will give the constructor a meaningful name.
###
makeCoffeeClassCompatible = ( classFn ) ->
  
  # CoffeeScript sets __super__ as a pointer to the superclass' prototype,
  # but QuickUI wants superclass, a pointer to the superclass itself. 
  superclass = classFn.__super__.constructor
  classFn.superclass = superclass
  
  if coffeeClassNeedsCompatibility superclass
    # Make CoffeeScript-based superclass compatible first.
    makeCoffeeClassCompatible superclass 
  
  # jQuery classes use fn as a synonym for prototype.
  classFn.fn = classFn::

  createInitClass classFn

  # Get class name from function in modern browser, otherwise parse constructor.
  classFn::className = classFn.name ? /function\s+([^\( ]*)/.exec( classFn.toString() )[1]
